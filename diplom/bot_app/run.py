#-------------–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ AIOGRAM 3--------------

#------------------------------–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ-----------------------------
from aiogram import Bot, Dispatcher, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramRetryAfter
import sys
import os
import io

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
import django
from django.core.management import execute_from_command_line
from django.conf import settings
from django.apps import apps
import asyncio

import logging
# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='errors.log', level=logging.INFO)

# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤ UTF-8
if sys.stdout.encoding != 'utf-8':
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'diplom.settings')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
django.setup()
logging.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∂–∞–Ω–≥–æ')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config import TOKEN_API, ADMIN

'''# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä API
session = AiohttpSession(proxy='http://127.0.0.1:8000/')
'''


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–º—É parse_mode=ParseMode.HTML –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
# –ë–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–æ–π –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –Ω–∞—à –±–æ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç —Å—á–∏—Ç—ã–≤–∞—Ç—å HTML —Ç–µ–≥–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–π
bot = Bot(token=TOKEN_API)
'''bot = Bot(token=TOKEN_API, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
'''
storage = MemoryStorage()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp.update.storage = storage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from bot_app.handlers.client import router_client as client_router
from bot_app.handlers.admin import router_admin as admin_router
#from bot_app.handlers.errors import router_errors as errors_router
#from bot_app.handlers.sign_in import router_sign_in as sign_in_router

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(client_router)
dp.include_router(admin_router)
#dp.include_router(errors_router)
#dp.include_router(sign_in_router)    






# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
async def start_bot():
    try:
        await bot.send_message(ADMIN, f'–Ø –∑–∞–ø—É—â–µ–Ωü•≥')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —Å—Ç–∞—Ä—Ç–µ: {e}')

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É
async def stop_bot():
    try:
        await bot.send_message(ADMIN, '–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ωüòî')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        await start_bot()
        logging.info('–∑–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ä—Ç–∞')
        await dp.start_polling()
        logging.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    except TelegramRetryAfter as e:
        print(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {e.retry_after} —Å–µ–∫—É–Ω–¥.")
        await asyncio.sleep(e.retry_after)
        await main()
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}')
        await stop_bot()
    finally:
        await bot.close()
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
        logging.info('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–æ—Ç–∞
        await storage.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Django
async def run_django():
    try:
        execute_from_command_line(['manage.py', 'runserver', '127.0.0.1:8000'])
        logging.info('–î–∂–∞–Ω–≥–æ –∑–∞–ø—É—â–µ–Ω')
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Django: {e}')

if __name__=='__main__':
    # –ó–∞–ø—É—Å–∫ –≤ asyncio
    loop = asyncio.get_event_loop()
    logging.info('–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω–∫–∏–æ')
    loop.create_task(run_django())  # –ó–∞–ø—É—Å–∫–∞–µ–º Django –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    logging.info('–ó–∞–ø—É—Å–∫ –¥–∂–∞–Ω–≥–æ')
    loop.run_until_complete(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞')
    
    # cd bot_app
    # python run.py


    

