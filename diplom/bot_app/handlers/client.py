
import logging
import os
import requests
import string
import json
from aiogram import  Router, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from asgiref.sync import sync_to_async
# –∏ –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤
from spacestore.models import Spacestore
from sign_in.models import CustomUser
import bot_app.keyboards as kb
from bot_app import text
from bot_app.config import ADMIN

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='errors.log', level=logging.INFO)
logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')




router_client = Router()

host = 'http://127.0.0.1:8000/bot/'

#-----------------CLIENT--------------------

# –≤—ã–∑—ã–≤–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
@router_client.message(CommandStart())
async def start(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç')
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    telegram_user, created = await CustomUser.objects.aget_or_create(id=message.from_user.id, username=message.from_user.username)
    logging.info('–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
    await sync_to_async(telegram_user.get_user)()
    welcome_message = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.username}! ‚ù§Ô∏è " + text.start
    await message.answer(welcome_message)
    logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ')

    if created:
        logging.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    else:
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω —Ç–∫ —É–∂–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
    await message.answer(reply_markup=kb.ik_button_info_store())  

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    
# –∫–æ–º–∞–Ω–¥–∞ help
@router_client.message(Command("help"))
async def help_command(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Ö–µ–ª–ø')
    help_text = (
        "–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/info - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ\n"
        "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
    )
    await message.answer(help_text)
    logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç —Ö–µ–ª–ø')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# Command to show user profile
@router_client.message(Command("profile"))
async def profile_command(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—å')
    from sign_in.models import CustomUser
    telegram_user = await CustomUser.objects.aget(chat_id=message.from_user.id)
    profile_info = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {telegram_user.username}\n"
        f"ID –ß–∞—Ç–∞: {telegram_user.chat_id}\n"
        # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
    )
    await message.answer(profile_info)
    logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—å')

# Displays information about the bot
@router_client.message(Command("info"))
async def info_command(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ')
    info_text = "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞."
    await message.answer(info_text)
    logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ')

# –ø—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
@router_client.message(F.text == '–ü—Ä–∏–≤–µ—Ç') 
async def hello(message: Message):
    await message.answer('üë© –ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

@router_client.message(F.text == '–ö–∞–∫ –¥–µ–ª–∞?') 
async def how_a_u(message: Message):
    await message.answer('üë© –†–∞–¥–∞, —á—Ç–æ —Ç–µ–±—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –º–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–∞–≥–∞–∑–∏–Ω')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

@router_client.message(F.text == '–ü–æ–∫–∞') 
async def bay(message: Message):
    await message.answer('–°–∫—É—á–∞—é üíî')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

@router_client.message(F.text == ' ') 
async def none(message: Message):
    await message.answer('üöÄ')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    
    
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –º–∞–≥–∞–∑–∏–Ω–µ
@router_client.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ')
async def store_info(message: Message):
    await message.answer(text.info, reply_markup = kb.ik_button_info_store)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã
@router_client.message(F.data == 'grafik')
async def grafik(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –≥—Ä–∞—Ñ–∏–∫')
    await message.answer(text.grafik_info, reply_markup = kb.ik_button_info_store)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –∞–¥—Ä–µ—Å
@router_client.message(F.data == 'adress')
async def adress(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –∞–¥—Ä–µ—Å')
    await message.answer(text.adress_info, reply_markup = kb.ik_button_info_store)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ
# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞
@router_client.message(F.data == 'delivery')
async def delivery(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏')
    await message.answer(text.delivery_info, reply_markup = kb.ik_button_info_store)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")









# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
@router_client.message(F.text == '–°–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
async def connect(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ —Å–≤—è–∑—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º')
    await message.answer(f"–£–≤–∞–∂–∞–µ–º—ã–π, {message.from_user.username}! –û–ø–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è! ")
    await message.answer()
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
@router_client.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
async def show_items(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤')
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        inline_keyboard = await kb.inline_store()
        await message.answer(reply_markup=inline_keyboard)
        logging.info('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å —Ç–æ–≤–∞—Ä–∞–º–∏')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
        response = requests.post(host, json={'user_id': message.from_user.id})
        if response.status_code == 200:
            await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
        else:
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"Error in show_items: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


    

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢–û–í–ê–†
# —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –≤ –Ω–µ–π –ø–æ—è–≤–ª—è–ª–∞—Å—å –¥—Ä—É–≥–∞—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
@router_client.callback_query(lambda call: call.data.startswith('choose_')) 
async def product(call: CallbackQuery, state: FSMContext):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ —Å —Ç–æ–≤–∞—Ä–æ–º')
    try:
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await call.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=await kb.ik_button_catalog())
        logging.info('–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω —Ç–æ–≤–∞—Ä–æ–º')
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
        response = requests.post(host, json={'user_id': call.from_user.id})
        if response.status_code == 200:
            await call.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
        else:
            await call.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        logging.error(f"Error in product callback: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")







        
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
@router_client.message(F.data == 'description')
async def description(call: CallbackQuery, state: FSMContext):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')
    product_description = Spacestore.objects.get(id=call.data.split('_')[1]).description  
    await call.answer(product_description)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': call.from_user.id})
    if response.status_code == 200:
        await call.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await call.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")








# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
# –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç—å –ö—É–ø–∏—Ç—å

class Reg(StatesGroup):
    name = State()
    adress = State()
    pay = State()
    phone_number = State()


@router_client.message(F.data == 'buy')
async def buy(message: types.Message, state: FSMContext):
    logging.info('–ó–∞–ø—É—Å—Ç–∏–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞')
    await message.answer('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞: ') 
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è:') 
    await state.set_state(Reg.name)

# –õ–æ–≤–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å
@router_client.message(Reg.name)
async def reg_2(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –≤–∫–ª—é—á–∞—è –≥–æ—Ä–æ–¥ –∏ –∏–Ω–¥–µ–∫—Å:')
    await state.set_state(Reg.adress)

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–¥—Ä–µ—Å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@router_client.message(Reg.adress)
async def reg_3(message: types.Message, state: FSMContext):
    adress = message.text 
    await state.update_data(adress=adress)
    await message.answer('–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–ª–∞—Ç–∏—Ç—å? –ú–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –∏–ª–∏ –∫–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É.', reply_markup = kb.payment_options())
    await state.set_state(Reg.pay) # –¥–æ–±–∞–≤–∏—Ç—å —Å—é–¥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–≤–µ—Ç–∞

# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@router_client.message(Reg.pay)
async def reg_4(message: types.Message, state: FSMContext):  
    pay = message.text
    await state.update_data(pay=pay)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏.–Ω–∞—á–∏–Ω–∞—è —Å +: ')
    await state.set_state(Reg.phone_number)
    
# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫ –¥–∞–Ω–Ω—ã—Ö
@router_client.message(Reg.phone_number)
async def reg_7(message: types.Message, state: FSMContext):
    from bot_app.run import bot
    phone_number = message.text
    if not phone_number.startswith("+"):
        phone_number = phone_number
    await state.update_data(phone_number=phone_number)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
    data = await state.get_data()
    name = data.get('name')
    adress = data.get('adress')
    pay = data.get('pay')
    phone_number = data.get('phone_number')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 
    order_info = (
        f"–û—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑ –æ—Ç {message.from_user.username} - {name}, –Ω–∞ {product} .\n"
        f"–î–∞–Ω–Ω—ã–µ:\n"
        f"- –ê–¥—Ä–µ—Å: {adress}\n"
        f"- –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {pay}\n"
        f"- –ù–æ–º–µ—Ä: {phone_number}\n"
        f"–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start"
    )
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await message.answer(order_info)
    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
    
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 
    await bot.send_message(ADMIN, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {order_info}")
    logging.info('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')
  
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Django API
    response = requests.post(host, json={'user_id': message.from_user.id})
    if response.status_code == 200:
        await message.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
    else:
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()
    # –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


'''----------------–ö–û–ù–ï–¶ –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê-------------'''   
    



#----------------OTHER------------------------

# —Ö–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
@router_client.message() # –ø—É—Å—Ç–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –≤ –∫–æ–Ω–µ—Ü!!!
async def echo_send(message: Message):
    logging.info('–°—Ä–∞–±–æ—Ç–∞–ª —Ü–µ–Ω–∑')
    # –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–Ω–æ–∂–µ—Å—Ç–≤–∞
    if {i.lower().translate(str.maketrans('', '', string.punctuation )) for i in message.text.split(' ')}\
        .intersection(set(json.load(open('cenz.cenz.json')))) != set():
        await message.reply('–ù–µ —Ä—É–≥–∞–π—Å—è üíî')
        await message.delete()
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.' + text.help) 


#----------------END-OTHER------------------------


# –≤ –∫–æ–Ω—Ü–µ, –æ—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –Ω–µ—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router_client.message() 
async def all_message(message: Message):
    await message.answer('üë© –ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ @clevereej')
    
#-----------------END-CLIENT--------------------
