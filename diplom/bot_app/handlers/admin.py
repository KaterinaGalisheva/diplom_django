from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

import bot_app.keyboards as kb
from bot_app.config import ADMIN
from sign_in.models import CustomUser   

router_admin = Router()

host = 'http://127.0.0.1:8000/bot/'

#-----------------ADMIN-----------------------

@router_admin.message(Command('admin'))
async def admin(message: Message):
    if message.from_user.id in ADMIN:
        await message.answer("–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–æ–º!", reply_markup=None)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–ª–∏–µ–Ω—Ç—ã
@router_admin.message(F.text == '–ö–ª–∏–µ–Ω—Ç—ã')
async def get_profile(message: Message):
    #async with ChatActions.typing(chat_id=message.from_user.id):
        all_users_data = CustomUser .objects.all()

        admin_text = (
            f'üë• –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{len(all_users_data)}</b> —á–µ–ª–æ–≤–µ–∫. –í–æ—Ç –∫–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É:\n\n'
        )

        for user in all_users_data:
            admin_text += (
                f'üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID: {user.user_id}\n'
                f'üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.full_name}\n'
            )
            if user.user_login is not None:
                admin_text += f'üîë –õ–æ–≥–∏–Ω: {user.user_login}\n'

        await message.answer(admin_text)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router_admin.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def admin_stat(message: types.Message):
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.")

class Del(StatesGroup):
    user_id = State()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å
@router_admin.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def admin_bloc(message: types.Message, state: FSMContext):
    await message.answer('–ö–æ–≥–æ —É–¥–∞–ª—è–µ–º?: ')
    await state.set_state(Del.user_id)

@router_admin.message(Del.user_id)
async def admin_bloc_delete(message: types.Message, state: FSMContext):
    user_id_to_del = message.text
    try:
        user = CustomUser .objects.get(id=user_id_to_del)
        user.delete()
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_del} —É–¥–∞–ª–µ–Ω.')
    except CustomUser .DoesNotExist:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_del} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    finally:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

#-----------------END-ADMIN--------------------
