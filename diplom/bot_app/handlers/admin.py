from datetime import datetime, timedelta
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

import bot_app.keyboards as kb
from bot_app.config import ADMIN
from sign_in.models import CustomUser, get_users_from_db, get_user_from_db, delete_user
from bot_app.models import Notification, get_users_to_sending_message_from_db

router_admin = Router()

host = 'http://127.0.0.1:8000/bot/'

#-----------------ADMIN-----------------------






@router_admin.message(Command('admin'))
async def admin(message: Message):
    if message.from_user.id == ADMIN:
        await message.answer("–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=kb.admin_panel)
    else:
        await message.answer("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ê–¥–º–∏–Ω–æ–º!", reply_markup=None)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–ª–∏–µ–Ω—Ç—ã
@router_admin.message(F.text == '–ö–ª–∏–µ–Ω—Ç—ã')
async def get_profile(message: Message):
    all_users_data = await get_users_from_db() 
    admin_text = (f'üë• –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{len(all_users_data)}</b> —á–µ–ª–æ–≤–µ–∫. –í–æ—Ç –∫–æ—Ä–æ—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É:\n\n')

    for user in all_users_data:
        admin_text += (
                f'üë§ –¢–µ–ª–µ–≥—Ä–∞–º ID: {user.id}\n'
                f'üìù –ü–æ–ª–Ω–æ–µ –∏–º—è: {user.username}\n'
            )
    
    await message.answer(admin_text)        



# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–∞—Å—Å—ã–ª–∫–∞
'''@router_admin.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞')
async def admin_sending(message: types.Message):
   # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

    # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    @router_admin.message()
    async def process_message_for_broadcast(broadcast_message: types.Message):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        notifications = await get_users_to_sending_message_from_db()

        # –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for notification in notifications:
            notification.message = broadcast_message.text  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await notification.send_notification()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
    router_admin.message()(process_message_for_broadcast)'''


class Del(StatesGroup):
    user_id = State()

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–∏—Ç—å
@router_admin.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def admin_bloc(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    await state.set_state(Del.user_id)

@router_admin.message(Del.user_id)
async def admin_bloc_delete(message: types.Message, state: FSMContext):
    user_id_to_del = message.text.strip()
    try:
        user = await get_user_from_db(user_id_to_del)
        await delete_user(user)
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_del} —É–¥–∞–ª–µ–Ω.')
    except CustomUser.DoesNotExist:
        await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_del} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    finally:
        await state.set_state(None)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ None

#-----------------END-ADMIN--------------------
